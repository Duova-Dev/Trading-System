{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2","program":"/Users/jimmykang/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","base64","--edition=2018","/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=7eaf0e10fb64b199","-C","extra-filename=-7eaf0e10fb64b199","--out-dir","/Users/jimmykang/Documents/ad_astra/duova/trading_system/trading_system/target/rls/debug/deps","-L","dependency=/Users/jimmykang/Documents/ad_astra/duova/trading_system/trading_system/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/jimmykang/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/jimmykang/Documents/ad_astra/duova/trading_system/trading_system/target/rls/debug/deps/libbase64-7eaf0e10fb64b199.rmeta"},"prelude":{"crate_id":{"name":"base64","disambiguator":[4406455854053721872,7375304076097739424]},"crate_root":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src","external_crates":[{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9054049529852543209,5756799355281213394]}},{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/chunked_encoder.rs","num":2,"id":{"name":"core","disambiguator":[649336883146201894,3308516238322163950]}},{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1154582834482060450,16344204990542480537]}},{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[9212379515936652129,17808485286264063370]}},{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[13327579764654116281,14306064291630426625]}},{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[17773251733480933597,18239998491734583498]}},{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8567743581675804787,15655200220621371766]}},{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15115520782807859583,9813785573872252500]}},{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[1572943810868196833,3902827232285166711]}},{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[6290371580101917419,15395902185345451181]}},{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[2934540361684350378,924291485644145262]}},{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[9277678418438935259,15657907931940784437]}},{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5423566938548125357,18340948646597872466]}},{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[489208416821938960,3305070343783546974]}}],"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":0,"byte_end":8863,"line_start":1,"line_end":250,"column_start":1,"column_end":3}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":79},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/mod.rs","byte_start":19132,"byte_end":19145,"line_start":3,"line_end":3,"column_start":24,"column_end":37},"alias_span":null,"name":"DecoderReader","value":"","parent":{"krate":0,"index":65}},{"kind":"Use","ref_id":{"krate":0,"index":133},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/mod.rs","byte_start":110038,"byte_end":110051,"line_start":3,"line_end":3,"column_start":24,"column_end":37},"alias_span":null,"name":"EncoderWriter","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":188},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4019,"byte_end":4038,"line_start":95,"line_end":95,"column_start":24,"column_end":43},"alias_span":null,"name":"encode_config_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":182},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4118,"byte_end":4124,"line_start":97,"line_end":97,"column_start":25,"column_end":31},"alias_span":null,"name":"encode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":184},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4126,"byte_end":4139,"line_start":97,"line_end":97,"column_start":33,"column_end":46},"alias_span":null,"name":"encode_config","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":186},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4141,"byte_end":4158,"line_start":97,"line_end":97,"column_start":48,"column_end":65},"alias_span":null,"name":"encode_config_buf","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":225},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4252,"byte_end":4258,"line_start":101,"line_end":101,"column_start":25,"column_end":31},"alias_span":null,"name":"decode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":227},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4260,"byte_end":4273,"line_start":101,"line_end":101,"column_start":33,"column_end":46},"alias_span":null,"name":"decode_config","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":230},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4275,"byte_end":4292,"line_start":101,"line_end":101,"column_start":48,"column_end":65},"alias_span":null,"name":"decode_config_buf","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":233},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4319,"byte_end":4338,"line_start":102,"line_end":102,"column_start":25,"column_end":44},"alias_span":null,"name":"decode_config_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":291},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4340,"byte_end":4351,"line_start":102,"line_end":102,"column_start":46,"column_end":57},"alias_span":null,"name":"DecodeError","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":0,"byte_end":8863,"line_start":1,"line_end":250,"column_start":1,"column_end":3},"name":"","qualname":"::","value":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":37},{"krate":0,"index":65},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":173},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":206},{"krate":0,"index":243},{"krate":0,"index":247},{"krate":0,"index":313},{"krate":0,"index":329},{"krate":0,"index":328},{"krate":0,"index":326},{"krate":0,"index":250},{"krate":0,"index":331},{"krate":0,"index":338},{"krate":0,"index":337},{"krate":0,"index":335},{"krate":0,"index":255},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266}],"decl_id":null,"docs":" # Configs","sig":null,"attributes":[{"value":"! # Configs","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":0,"byte_end":13,"line_start":1,"line_end":1,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":14,"byte_end":17,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! There isn't just one type of Base64; that would be too simple. You need to choose a character","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":18,"byte_end":115,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"! set (standard, URL-safe, etc) and padding suffix (yes/no).","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":116,"byte_end":178,"line_start":4,"line_end":4,"column_start":1,"column_end":63}},{"value":"! The `Config` struct encapsulates this info. There are some common configs included: `STANDARD`,","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":179,"byte_end":278,"line_start":5,"line_end":5,"column_start":1,"column_end":100}},{"value":"! `URL_SAFE`, etc. You can also make your own `Config` if needed.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":279,"byte_end":346,"line_start":6,"line_end":6,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":347,"byte_end":350,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! The functions that don't have `config` in the name (e.g. `encode()` and `decode()`) use the","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":351,"byte_end":446,"line_start":8,"line_end":8,"column_start":1,"column_end":96}},{"value":"! `STANDARD` config .","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":447,"byte_end":470,"line_start":9,"line_end":9,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":471,"byte_end":474,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! The functions that write to a slice (the ones that end in `_slice`) are generally the fastest","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":475,"byte_end":572,"line_start":11,"line_end":11,"column_start":1,"column_end":98}},{"value":"! because they don't need to resize anything. If it fits in your workflow and you care about","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":573,"byte_end":667,"line_start":12,"line_end":12,"column_start":1,"column_end":95}},{"value":"! performance, keep using the same buffer (growing as need be) and use the `_slice` methods for","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":668,"byte_end":765,"line_start":13,"line_end":13,"column_start":1,"column_end":98}},{"value":"! the best performance.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":766,"byte_end":791,"line_start":14,"line_end":14,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":792,"byte_end":795,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! # Encoding","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":796,"byte_end":810,"line_start":16,"line_end":16,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":811,"byte_end":814,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"! Several different encoding functions are available to you depending on your desire for","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":815,"byte_end":905,"line_start":18,"line_end":18,"column_start":1,"column_end":91}},{"value":"! convenience vs performance.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":906,"byte_end":937,"line_start":19,"line_end":19,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":938,"byte_end":941,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"! | Function                | Output                       | Allocates                      |","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":942,"byte_end":1037,"line_start":21,"line_end":21,"column_start":1,"column_end":96}},{"value":"! | ----------------------- | ---------------------------- | ------------------------------ |","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":1038,"byte_end":1133,"line_start":22,"line_end":22,"column_start":1,"column_end":96}},{"value":"! | `encode`                | Returns a new `String`       | Always                         |","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":1134,"byte_end":1229,"line_start":23,"line_end":23,"column_start":1,"column_end":96}},{"value":"! | `encode_config`         | Returns a new `String`       | Always                         |","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":1230,"byte_end":1325,"line_start":24,"line_end":24,"column_start":1,"column_end":96}},{"value":"! | `encode_config_buf`     | Appends to provided `String` | Only if `String` needs to grow |","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":1326,"byte_end":1421,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"! | `encode_config_slice`   | Writes to provided `&[u8]`   | Never                          |","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":1422,"byte_end":1517,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":1518,"byte_end":1521,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! All of the encoding functions that take a `Config` will pad as per the config.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":1522,"byte_end":1604,"line_start":28,"line_end":28,"column_start":1,"column_end":83}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":1605,"byte_end":1608,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"! # Decoding","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":1609,"byte_end":1623,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":1624,"byte_end":1627,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"! Just as for encoding, there are different decoding functions available.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":1628,"byte_end":1703,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":1704,"byte_end":1707,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! | Function                | Output                        | Allocates                      |","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":1708,"byte_end":1804,"line_start":34,"line_end":34,"column_start":1,"column_end":97}},{"value":"! | ----------------------- | ----------------------------- | ------------------------------ |","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":1805,"byte_end":1901,"line_start":35,"line_end":35,"column_start":1,"column_end":97}},{"value":"! | `decode`                | Returns a new `Vec<u8>`       | Always                         |","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":1902,"byte_end":1998,"line_start":36,"line_end":36,"column_start":1,"column_end":97}},{"value":"! | `decode_config`         | Returns a new `Vec<u8>`       | Always                         |","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":1999,"byte_end":2095,"line_start":37,"line_end":37,"column_start":1,"column_end":97}},{"value":"! | `decode_config_buf`     | Appends to provided `Vec<u8>` | Only if `Vec` needs to grow    |","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":2096,"byte_end":2192,"line_start":38,"line_end":38,"column_start":1,"column_end":97}},{"value":"! | `decode_config_slice`   | Writes to provided `&[u8]`    | Never                          |","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":2193,"byte_end":2289,"line_start":39,"line_end":39,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":2290,"byte_end":2293,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"! Unlike encoding, where all possible input is valid, decoding can fail (see `DecodeError`).","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":2294,"byte_end":2388,"line_start":41,"line_end":41,"column_start":1,"column_end":95}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":2389,"byte_end":2392,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"! Input can be invalid because it has invalid characters or invalid padding. (No padding at all is","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":2393,"byte_end":2493,"line_start":43,"line_end":43,"column_start":1,"column_end":101}},{"value":"! valid, but excess padding is not.) Whitespace in the input is invalid.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":2494,"byte_end":2568,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":2569,"byte_end":2572,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"! # `Read` and `Write`","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":2573,"byte_end":2597,"line_start":46,"line_end":46,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":2598,"byte_end":2601,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! To map a `Read` of b64 bytes to the decoded bytes, wrap a reader (file, network socket, etc)","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":2602,"byte_end":2698,"line_start":48,"line_end":48,"column_start":1,"column_end":97}},{"value":"! with `base64::read::DecoderReader`. To write raw bytes and have them b64 encoded on the fly,","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":2699,"byte_end":2795,"line_start":49,"line_end":49,"column_start":1,"column_end":97}},{"value":"! wrap a writer with `base64::write::EncoderWriter`. There is some performance overhead (15% or","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":2796,"byte_end":2893,"line_start":50,"line_end":50,"column_start":1,"column_end":98}},{"value":"! so) because of the necessary buffer shuffling -- still fast enough that almost nobody cares.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":2894,"byte_end":2990,"line_start":51,"line_end":51,"column_start":1,"column_end":97}},{"value":"! Also, these implementations do not heap allocate.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":2991,"byte_end":3044,"line_start":52,"line_end":52,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":3045,"byte_end":3048,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"! # Panics","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":3049,"byte_end":3061,"line_start":54,"line_end":54,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":3062,"byte_end":3065,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"! If length calculations result in overflowing `usize`, a panic will result.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":3066,"byte_end":3144,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":3145,"byte_end":3148,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"! The `_slice` flavors of encode or decode will panic if the provided output slice is too small,","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":3149,"byte_end":3247,"line_start":58,"line_end":58,"column_start":1,"column_end":99}},{"value":"deny(missing_docs, trivial_casts, trivial_numeric_casts,\n       unused_extern_crates, unused_import_braces, unused_results,\n       variant_size_differences, warnings)","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":3318,"byte_end":3508,"line_start":61,"line_end":70,"column_start":1,"column_end":3}},{"value":"forbid(unsafe_code)","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":3509,"byte_end":3532,"line_start":71,"line_end":71,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":14},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/chunked_encoder.rs","byte_start":9190,"byte_end":9195,"line_start":13,"line_end":13,"column_start":10,"column_end":15},"name":"Error","qualname":"::chunked_encoder::Sink::Error","value":"type Error;","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":37},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"display","qualname":"::display","value":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":60}],"decl_id":null,"docs":" Enables base64'd output anywhere you might use a `Display` implementation, like a format string.","sig":null,"attributes":[{"value":"! Enables base64'd output anywhere you might use a `Display` implementation, like a format string.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":16409,"byte_end":16509,"line_start":1,"line_end":1,"column_start":1,"column_end":101}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":16510,"byte_end":16513,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":16514,"byte_end":16521,"line_start":3,"line_end":3,"column_start":1,"column_end":8}},{"value":"! use base64::display::Base64Display;","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":16522,"byte_end":16561,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":16562,"byte_end":16565,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! let data = vec![0x0, 0x1, 0x2, 0x3];","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":16566,"byte_end":16606,"line_start":6,"line_end":6,"column_start":1,"column_end":41}},{"value":"! let wrapper = Base64Display::with_config(&data, base64::STANDARD);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":16607,"byte_end":16677,"line_start":7,"line_end":7,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":16678,"byte_end":16681,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! assert_eq!(\"base64: AAECAw==\", format!(\"base64: {}\", wrapper));","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":16682,"byte_end":16749,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"! ```","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":16750,"byte_end":16757,"line_start":10,"line_end":10,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":46},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":16986,"byte_end":16999,"line_start":18,"line_end":18,"column_start":12,"column_end":25},"name":"Base64Display","qualname":"::display::Base64Display","value":"Base64Display {  }","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49}],"decl_id":null,"docs":" A convenience wrapper for base64'ing bytes into a format string without heap allocation.\n","sig":null,"attributes":[{"value":"/ A convenience wrapper for base64'ing bytes into a format string without heap allocation.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":16882,"byte_end":16974,"line_start":17,"line_end":17,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":17166,"byte_end":17177,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"name":"with_config","qualname":"<Base64Display>::with_config","value":"fn (bytes: &[u8], config: Config) -> Base64Display","parent":null,"children":[],"decl_id":null,"docs":" Create a `Base64Display` with the provided config.\n","sig":null,"attributes":[{"value":"/ Create a `Base64Display` with the provided config.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":17100,"byte_end":17154,"line_start":24,"line_end":24,"column_start":5,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":65},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::read","value":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/mod.rs","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":114}],"decl_id":null,"docs":" Implementations of `io::Read` to transparently decode base64.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", test))","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":3872,"byte_end":3906,"line_start":88,"line_end":88,"column_start":1,"column_end":35}},{"value":"! Implementations of `io::Read` to transparently decode base64.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/mod.rs","byte_start":19030,"byte_end":19095,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":79},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":20142,"byte_end":20155,"line_start":32,"line_end":32,"column_start":12,"column_end":25},"name":"DecoderReader","qualname":"::read::decoder::DecoderReader","value":"DecoderReader {  }","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92}],"decl_id":null,"docs":" A `Read` implementation that decodes base64 data read from an underlying reader.","sig":null,"attributes":[{"value":"/ A `Read` implementation that decodes base64 data read from an underlying reader.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":19525,"byte_end":19609,"line_start":12,"line_end":12,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":19610,"byte_end":19613,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":19614,"byte_end":19628,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":19629,"byte_end":19632,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":19633,"byte_end":19640,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ use std::io::Read;","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":19641,"byte_end":19663,"line_start":17,"line_end":17,"column_start":1,"column_end":23}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":19664,"byte_end":19688,"line_start":18,"line_end":18,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":19689,"byte_end":19692,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ // use a cursor as the simplest possible `Read` -- in real code this is probably a file, etc.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":19693,"byte_end":19790,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/ let mut wrapped_reader = Cursor::new(b\"YXNkZg==\");","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":19791,"byte_end":19845,"line_start":21,"line_end":21,"column_start":1,"column_end":55}},{"value":"/ let mut decoder = base64::read::DecoderReader::new(","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":19846,"byte_end":19901,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/     &mut wrapped_reader, base64::STANDARD);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":19902,"byte_end":19949,"line_start":23,"line_end":23,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":19950,"byte_end":19953,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ // handle errors as you normally would","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":19954,"byte_end":19996,"line_start":25,"line_end":25,"column_start":1,"column_end":43}},{"value":"/ let mut result = Vec::new();","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":19997,"byte_end":20029,"line_start":26,"line_end":26,"column_start":1,"column_end":33}},{"value":"/ decoder.read_to_end(&mut result).unwrap();","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":20030,"byte_end":20076,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":20077,"byte_end":20080,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(b\"asdf\", &result[..]);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":20081,"byte_end":20118,"line_start":29,"line_end":29,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":20119,"byte_end":20122,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":20123,"byte_end":20130,"line_start":31,"line_end":31,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":21869,"byte_end":21872,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"new","qualname":"<DecoderReader>::new","value":"fn (r: &'a mut R, config: Config) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that will read from the provided reader `r`.\n","sig":null,"attributes":[{"value":"/ Create a new decoder that will read from the provided reader `r`.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":21788,"byte_end":21857,"line_start":72,"line_end":72,"column_start":5,"column_end":74}}]},{"kind":"Mod","id":{"krate":0,"index":117},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::write","value":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/mod.rs","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":172}],"decl_id":null,"docs":" Implementations of `io::Write` to transparently handle base64.\n","sig":null,"attributes":[{"value":"cfg(any (feature = \"std\", test))","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":3933,"byte_end":3967,"line_start":91,"line_end":91,"column_start":1,"column_end":35}},{"value":"! Implementations of `io::Write` to transparently handle base64.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/mod.rs","byte_start":109935,"byte_end":110001,"line_start":1,"line_end":1,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":133},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":112103,"byte_end":112116,"line_start":59,"line_end":59,"column_start":12,"column_end":25},"name":"EncoderWriter","qualname":"::write::encoder::EncoderWriter","value":"EncoderWriter {  }","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145}],"decl_id":null,"docs":" A `Write` implementation that base64 encodes data before delegating to the wrapped writer.","sig":null,"attributes":[{"value":"/ A `Write` implementation that base64 encodes data before delegating to the wrapped writer.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":110503,"byte_end":110597,"line_start":14,"line_end":14,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":110598,"byte_end":110601,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Because base64 has special handling for the end of the input data (padding, etc), there's a","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":110602,"byte_end":110697,"line_start":16,"line_end":16,"column_start":1,"column_end":96}},{"value":"/ `finish()` method on this type that encodes any leftover input bytes and adds padding if","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":110698,"byte_end":110790,"line_start":17,"line_end":17,"column_start":1,"column_end":93}},{"value":"/ appropriate. It's called automatically when deallocated (see the `Drop` implementation), but","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":110791,"byte_end":110887,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ any error that occurs when invoking the underlying writer will be suppressed. If you want to","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":110888,"byte_end":110984,"line_start":19,"line_end":19,"column_start":1,"column_end":97}},{"value":"/ handle such errors, call `finish()` yourself.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":110985,"byte_end":111034,"line_start":20,"line_end":20,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111035,"byte_end":111038,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111039,"byte_end":111053,"line_start":22,"line_end":22,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111054,"byte_end":111057,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111058,"byte_end":111065,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use std::io::Write;","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111066,"byte_end":111089,"line_start":25,"line_end":25,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111090,"byte_end":111093,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ // use a vec as the simplest possible `Write` -- in real code this is probably a file, etc.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111094,"byte_end":111189,"line_start":27,"line_end":27,"column_start":1,"column_end":96}},{"value":"/ let mut wrapped_writer = Vec::new();","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111190,"byte_end":111230,"line_start":28,"line_end":28,"column_start":1,"column_end":41}},{"value":"/ {","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111231,"byte_end":111236,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/     let mut enc = base64::write::EncoderWriter::new(","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111237,"byte_end":111293,"line_start":30,"line_end":30,"column_start":1,"column_end":57}},{"value":"/         &mut wrapped_writer, base64::STANDARD);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111294,"byte_end":111345,"line_start":31,"line_end":31,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111346,"byte_end":111349,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/     // handle errors as you normally would","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111350,"byte_end":111396,"line_start":33,"line_end":33,"column_start":1,"column_end":47}},{"value":"/     enc.write_all(b\"asdf\").unwrap();","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111397,"byte_end":111437,"line_start":34,"line_end":34,"column_start":1,"column_end":41}},{"value":"/     // could leave this out to be called by Drop, if you don't care","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111438,"byte_end":111509,"line_start":35,"line_end":35,"column_start":1,"column_end":72}},{"value":"/     // about handling errors","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111510,"byte_end":111542,"line_start":36,"line_end":36,"column_start":1,"column_end":33}},{"value":"/     enc.finish().unwrap();","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111543,"byte_end":111573,"line_start":37,"line_end":37,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111574,"byte_end":111577,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ }","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111578,"byte_end":111583,"line_start":39,"line_end":39,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111584,"byte_end":111587,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ // base64 was written to the writer","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111588,"byte_end":111627,"line_start":41,"line_end":41,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(b\"YXNkZg==\", &wrapped_writer[..]);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111628,"byte_end":111677,"line_start":42,"line_end":42,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111678,"byte_end":111681,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111682,"byte_end":111689,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111690,"byte_end":111693,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111694,"byte_end":111706,"line_start":46,"line_end":46,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111707,"byte_end":111710,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Calling `write()` after `finish()` is invalid and will panic.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111711,"byte_end":111776,"line_start":48,"line_end":48,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111777,"byte_end":111780,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111781,"byte_end":111793,"line_start":50,"line_end":50,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111794,"byte_end":111797,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ Base64 encoding itself does not generate errors, but errors from the wrapped writer will be","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111798,"byte_end":111893,"line_start":52,"line_end":52,"column_start":1,"column_end":96}},{"value":"/ returned as per the contract of `Write`.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111894,"byte_end":111938,"line_start":53,"line_end":53,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111939,"byte_end":111942,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111943,"byte_end":111960,"line_start":55,"line_end":55,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111961,"byte_end":111964,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ It has some minor performance loss compared to encoding slices (a couple percent).","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":111965,"byte_end":112051,"line_start":57,"line_end":57,"column_start":1,"column_end":87}},{"value":"/ It does not do any heap allocation.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":112052,"byte_end":112091,"line_start":58,"line_end":58,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":113630,"byte_end":113633,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"new","qualname":"<EncoderWriter>::new","value":"fn (w: &'a mut W, config: Config) -> EncoderWriter<'a, W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that will write to the provided delegate writer `w`.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that will write to the provided delegate writer `w`.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":113541,"byte_end":113618,"line_start":93,"line_end":93,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":114543,"byte_end":114549,"line_start":119,"line_end":119,"column_start":12,"column_end":18},"name":"finish","qualname":"<EncoderWriter>::finish","value":"fn (&mut self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode all remaining buffered data and write it, including any trailing incomplete input\n triples and associated padding.","sig":null,"attributes":[{"value":"/ Encode all remaining buffered data and write it, including any trailing incomplete input","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":113997,"byte_end":114089,"line_start":107,"line_end":107,"column_start":5,"column_end":97}},{"value":"/ triples and associated padding.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":114094,"byte_end":114129,"line_start":108,"line_end":108,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":114134,"byte_end":114137,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ Once this succeeds, no further writes can be performed, as that would produce invalid","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":114142,"byte_end":114231,"line_start":110,"line_end":110,"column_start":5,"column_end":94}},{"value":"/ base64.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":114236,"byte_end":114247,"line_start":111,"line_end":111,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":114252,"byte_end":114255,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ This may write to the delegate writer multiple times if the delegate writer does not accept all input provided","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":114260,"byte_end":114374,"line_start":113,"line_end":113,"column_start":5,"column_end":119}},{"value":"/ to its `write` each invocation.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":114379,"byte_end":114414,"line_start":114,"line_end":114,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":114419,"byte_end":114422,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":114427,"byte_end":114439,"line_start":116,"line_end":116,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":114444,"byte_end":114447,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ The first error that is not of [`ErrorKind::Interrupted`] will be returned.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":114452,"byte_end":114531,"line_start":118,"line_end":118,"column_start":5,"column_end":84}}]},{"kind":"Function","id":{"krate":0,"index":182},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125272,"byte_end":125278,"line_start":23,"line_end":23,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode::encode","value":"fn <T> (input: T) -> String","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64.\nReturns a String.\nConvenience for `encode_config(input, base64::STANDARD);`.","sig":null,"attributes":[{"value":"/Encode arbitrary octets as base64.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":124926,"byte_end":124963,"line_start":8,"line_end":8,"column_start":1,"column_end":38}},{"value":"/Returns a String.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":124964,"byte_end":124984,"line_start":9,"line_end":9,"column_start":1,"column_end":21}},{"value":"/Convenience for `encode_config(input, base64::STANDARD);`.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":124985,"byte_end":125046,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125047,"byte_end":125050,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125051,"byte_end":125063,"line_start":12,"line_end":12,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125064,"byte_end":125067,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125068,"byte_end":125078,"line_start":14,"line_end":14,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125079,"byte_end":125102,"line_start":15,"line_end":15,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125103,"byte_end":125106,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125107,"byte_end":125121,"line_start":17,"line_end":17,"column_start":1,"column_end":15}},{"value":"/    let b64 = base64::encode(b\"hello world\");","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125122,"byte_end":125170,"line_start":18,"line_end":18,"column_start":1,"column_end":49}},{"value":"/    println!(\"{}\", b64);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125171,"byte_end":125198,"line_start":19,"line_end":19,"column_start":1,"column_end":28}},{"value":"/}","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125199,"byte_end":125203,"line_start":20,"line_end":20,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125204,"byte_end":125210,"line_start":21,"line_end":21,"column_start":1,"column_end":7}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125211,"byte_end":125264,"line_start":22,"line_end":22,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":184},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125783,"byte_end":125796,"line_start":44,"line_end":44,"column_start":8,"column_end":21},"name":"encode_config","qualname":"::encode::encode_config","value":"fn <T> (input: T, config: Config) -> String","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64.\nReturns a String.","sig":null,"attributes":[{"value":"/Encode arbitrary octets as base64.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125355,"byte_end":125392,"line_start":27,"line_end":27,"column_start":1,"column_end":38}},{"value":"/Returns a String.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125393,"byte_end":125413,"line_start":28,"line_end":28,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125414,"byte_end":125417,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125418,"byte_end":125430,"line_start":30,"line_end":30,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125431,"byte_end":125434,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125435,"byte_end":125445,"line_start":32,"line_end":32,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125446,"byte_end":125469,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125470,"byte_end":125473,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125474,"byte_end":125488,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/    let b64 = base64::encode_config(b\"hello world~\", base64::STANDARD);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125489,"byte_end":125563,"line_start":36,"line_end":36,"column_start":1,"column_end":75}},{"value":"/    println!(\"{}\", b64);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125564,"byte_end":125591,"line_start":37,"line_end":37,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125592,"byte_end":125595,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/    let b64_url = base64::encode_config(b\"hello internet~\", base64::URL_SAFE);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125596,"byte_end":125677,"line_start":39,"line_end":39,"column_start":1,"column_end":82}},{"value":"/    println!(\"{}\", b64_url);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125678,"byte_end":125709,"line_start":40,"line_end":40,"column_start":1,"column_end":32}},{"value":"/}","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125710,"byte_end":125714,"line_start":41,"line_end":41,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125715,"byte_end":125721,"line_start":42,"line_end":42,"column_start":1,"column_end":7}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":125722,"byte_end":125775,"line_start":43,"line_end":43,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":186},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126704,"byte_end":126721,"line_start":74,"line_end":74,"column_start":8,"column_end":25},"name":"encode_config_buf","qualname":"::encode::encode_config_buf","value":"fn <T> (input: T, config: Config, buf: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64.\nWrites into the supplied output buffer, which will grow the buffer if needed.","sig":null,"attributes":[{"value":"/Encode arbitrary octets as base64.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126160,"byte_end":126197,"line_start":55,"line_end":55,"column_start":1,"column_end":38}},{"value":"/Writes into the supplied output buffer, which will grow the buffer if needed.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126198,"byte_end":126278,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126279,"byte_end":126282,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126283,"byte_end":126295,"line_start":58,"line_end":58,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126296,"byte_end":126299,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126300,"byte_end":126310,"line_start":60,"line_end":60,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126311,"byte_end":126334,"line_start":61,"line_end":61,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126335,"byte_end":126338,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126339,"byte_end":126353,"line_start":63,"line_end":63,"column_start":1,"column_end":15}},{"value":"/    let mut buf = String::new();","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126354,"byte_end":126389,"line_start":64,"line_end":64,"column_start":1,"column_end":36}},{"value":"/    base64::encode_config_buf(b\"hello world~\", base64::STANDARD, &mut buf);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126390,"byte_end":126468,"line_start":65,"line_end":65,"column_start":1,"column_end":79}},{"value":"/    println!(\"{}\", buf);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126469,"byte_end":126496,"line_start":66,"line_end":66,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126497,"byte_end":126500,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/    buf.clear();","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126501,"byte_end":126520,"line_start":68,"line_end":68,"column_start":1,"column_end":20}},{"value":"/    base64::encode_config_buf(b\"hello internet~\", base64::URL_SAFE, &mut buf);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126521,"byte_end":126602,"line_start":69,"line_end":69,"column_start":1,"column_end":82}},{"value":"/    println!(\"{}\", buf);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126603,"byte_end":126630,"line_start":70,"line_end":70,"column_start":1,"column_end":28}},{"value":"/}","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126631,"byte_end":126635,"line_start":71,"line_end":71,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126636,"byte_end":126642,"line_start":72,"line_end":72,"column_start":1,"column_end":7}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":126643,"byte_end":126696,"line_start":73,"line_end":73,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":188},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127997,"byte_end":128016,"line_start":117,"line_end":117,"column_start":8,"column_end":27},"name":"encode_config_slice","qualname":"::encode::encode_config_slice","value":"fn <T> (input: T, config: Config, output: &mut [u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Encode arbitrary octets as base64.\n Writes into the supplied output buffer.","sig":null,"attributes":[{"value":"/ Encode arbitrary octets as base64.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127087,"byte_end":127125,"line_start":87,"line_end":87,"column_start":1,"column_end":39}},{"value":"/ Writes into the supplied output buffer.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127126,"byte_end":127169,"line_start":88,"line_end":88,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127170,"byte_end":127173,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ This is useful if you wish to avoid allocation entirely (e.g. encoding into a stack-resident","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127174,"byte_end":127270,"line_start":90,"line_end":90,"column_start":1,"column_end":97}},{"value":"/ or statically-allocated buffer).","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127271,"byte_end":127307,"line_start":91,"line_end":91,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127308,"byte_end":127311,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127312,"byte_end":127324,"line_start":93,"line_end":93,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127325,"byte_end":127328,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ If `output` is too small to hold the encoded version of `input`, a panic will result.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127329,"byte_end":127418,"line_start":95,"line_end":95,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127419,"byte_end":127422,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127423,"byte_end":127436,"line_start":97,"line_end":97,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127437,"byte_end":127440,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127441,"byte_end":127452,"line_start":99,"line_end":99,"column_start":1,"column_end":12}},{"value":"/ extern crate base64;","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127453,"byte_end":127477,"line_start":100,"line_end":100,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127478,"byte_end":127481,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127482,"byte_end":127497,"line_start":102,"line_end":102,"column_start":1,"column_end":16}},{"value":"/     let s = b\"hello internet!\";","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127498,"byte_end":127533,"line_start":103,"line_end":103,"column_start":1,"column_end":36}},{"value":"/     let mut buf = Vec::new();","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127534,"byte_end":127567,"line_start":104,"line_end":104,"column_start":1,"column_end":34}},{"value":"/     // make sure we'll have a slice big enough for base64 + padding","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127568,"byte_end":127639,"line_start":105,"line_end":105,"column_start":1,"column_end":72}},{"value":"/     buf.resize(s.len() * 4 / 3 + 4, 0);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127640,"byte_end":127683,"line_start":106,"line_end":106,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127684,"byte_end":127687,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/     let bytes_written = base64::encode_config_slice(s,","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127688,"byte_end":127746,"line_start":108,"line_end":108,"column_start":1,"column_end":59}},{"value":"/                             base64::STANDARD, &mut buf);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127747,"byte_end":127807,"line_start":109,"line_end":109,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127808,"byte_end":127811,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/     // shorten our vec down to just what was written","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127812,"byte_end":127868,"line_start":111,"line_end":111,"column_start":1,"column_end":57}},{"value":"/     buf.resize(bytes_written, 0);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127869,"byte_end":127906,"line_start":112,"line_end":112,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127907,"byte_end":127910,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/     assert_eq!(s, base64::decode(&buf).unwrap().as_slice());","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127911,"byte_end":127975,"line_start":114,"line_end":114,"column_start":1,"column_end":65}},{"value":"/ }","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127976,"byte_end":127981,"line_start":115,"line_end":115,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/encode.rs","byte_start":127982,"byte_end":127989,"line_start":116,"line_end":116,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":292},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":149351,"byte_end":149362,"line_start":30,"line_end":30,"column_start":5,"column_end":16},"name":"InvalidByte","qualname":"::decode::DecodeError::InvalidByte","value":"DecodeError::InvalidByte(usize, u8)","parent":{"krate":0,"index":291},"children":[],"decl_id":null,"docs":" An invalid byte was found in the input. The offset and offending byte are provided.\n","sig":null,"attributes":[{"value":"/ An invalid byte was found in the input. The offset and offending byte are provided.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":149259,"byte_end":149346,"line_start":29,"line_end":29,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":296},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":149423,"byte_end":149436,"line_start":32,"line_end":32,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::decode::DecodeError::InvalidLength","value":"DecodeError::InvalidLength","parent":{"krate":0,"index":291},"children":[],"decl_id":null,"docs":" The length of the input is invalid.\n","sig":null,"attributes":[{"value":"/ The length of the input is invalid.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":149379,"byte_end":149418,"line_start":31,"line_end":31,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":298},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":149779,"byte_end":149796,"line_start":37,"line_end":37,"column_start":5,"column_end":22},"name":"InvalidLastSymbol","qualname":"::decode::DecodeError::InvalidLastSymbol","value":"DecodeError::InvalidLastSymbol(usize, u8)","parent":{"krate":0,"index":291},"children":[],"decl_id":null,"docs":" The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\n This is indicative of corrupted or truncated Base64.\n Unlike InvalidByte, which reports symbols that aren't in the alphabet, this error is for\n symbols that are in the alphabet but represent nonsensical encodings.\n","sig":null,"attributes":[{"value":"/ The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":149442,"byte_end":149538,"line_start":33,"line_end":33,"column_start":5,"column_end":101}},{"value":"/ This is indicative of corrupted or truncated Base64.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":149543,"byte_end":149599,"line_start":34,"line_end":34,"column_start":5,"column_end":61}},{"value":"/ Unlike InvalidByte, which reports symbols that aren't in the alphabet, this error is for","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":149604,"byte_end":149696,"line_start":35,"line_end":35,"column_start":5,"column_end":97}},{"value":"/ symbols that are in the alphabet but represent nonsensical encodings.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":149701,"byte_end":149774,"line_start":36,"line_end":36,"column_start":5,"column_end":78}}]},{"kind":"Enum","id":{"krate":0,"index":291},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":149241,"byte_end":149252,"line_start":28,"line_end":28,"column_start":10,"column_end":21},"name":"DecodeError","qualname":"::decode::DecodeError","value":"DecodeError::{InvalidByte, InvalidLength, InvalidLastSymbol}","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":296},{"krate":0,"index":298}],"decl_id":null,"docs":" Errors that can occur while decoding.\n","sig":null,"attributes":[{"value":"/ Errors that can occur while decoding.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":149151,"byte_end":149192,"line_start":26,"line_end":26,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":225},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151142,"byte_end":151148,"line_start":84,"line_end":84,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode::decode","value":"fn <T> (input: T) -> Result<Vec<u8>, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"Decode from string reference as octets.\nReturns a Result containing a Vec<u8>.\nConvenience `decode_config(input, base64::STANDARD);`.","sig":null,"attributes":[{"value":"/Decode from string reference as octets.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":150755,"byte_end":150797,"line_start":69,"line_end":69,"column_start":1,"column_end":43}},{"value":"/Returns a Result containing a Vec<u8>.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":150798,"byte_end":150839,"line_start":70,"line_end":70,"column_start":1,"column_end":42}},{"value":"/Convenience `decode_config(input, base64::STANDARD);`.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":150840,"byte_end":150897,"line_start":71,"line_end":71,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":150898,"byte_end":150901,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":150902,"byte_end":150914,"line_start":73,"line_end":73,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":150915,"byte_end":150918,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":150919,"byte_end":150929,"line_start":75,"line_end":75,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":150930,"byte_end":150953,"line_start":76,"line_end":76,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":150954,"byte_end":150957,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":150958,"byte_end":150972,"line_start":78,"line_end":78,"column_start":1,"column_end":15}},{"value":"/    let bytes = base64::decode(\"aGVsbG8gd29ybGQ=\").unwrap();","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":150973,"byte_end":151036,"line_start":79,"line_end":79,"column_start":1,"column_end":64}},{"value":"/    println!(\"{:?}\", bytes);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151037,"byte_end":151068,"line_start":80,"line_end":80,"column_start":1,"column_end":32}},{"value":"/}","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151069,"byte_end":151073,"line_start":81,"line_end":81,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151074,"byte_end":151080,"line_start":82,"line_end":82,"column_start":1,"column_end":7}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151081,"byte_end":151134,"line_start":83,"line_end":83,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":227},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151746,"byte_end":151759,"line_start":105,"line_end":105,"column_start":8,"column_end":21},"name":"decode_config","qualname":"::decode::decode_config","value":"fn <T> (input: T, config: Config) -> Result<Vec<u8>, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"Decode from string reference as octets.\nReturns a Result containing a Vec<u8>.","sig":null,"attributes":[{"value":"/Decode from string reference as octets.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151247,"byte_end":151289,"line_start":88,"line_end":88,"column_start":1,"column_end":43}},{"value":"/Returns a Result containing a Vec<u8>.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151290,"byte_end":151331,"line_start":89,"line_end":89,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151332,"byte_end":151335,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151336,"byte_end":151348,"line_start":91,"line_end":91,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151349,"byte_end":151352,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151353,"byte_end":151363,"line_start":93,"line_end":93,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151364,"byte_end":151387,"line_start":94,"line_end":94,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151388,"byte_end":151391,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151392,"byte_end":151406,"line_start":96,"line_end":96,"column_start":1,"column_end":15}},{"value":"/    let bytes = base64::decode_config(\"aGVsbG8gd29ybGR+Cg==\", base64::STANDARD).unwrap();","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151407,"byte_end":151499,"line_start":97,"line_end":97,"column_start":1,"column_end":93}},{"value":"/    println!(\"{:?}\", bytes);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151500,"byte_end":151531,"line_start":98,"line_end":98,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151532,"byte_end":151535,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/    let bytes_url = base64::decode_config(\"aGVsbG8gaW50ZXJuZXR-Cg==\", base64::URL_SAFE).unwrap();","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151536,"byte_end":151636,"line_start":100,"line_end":100,"column_start":1,"column_end":101}},{"value":"/    println!(\"{:?}\", bytes_url);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151637,"byte_end":151672,"line_start":101,"line_end":101,"column_start":1,"column_end":36}},{"value":"/}","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151673,"byte_end":151677,"line_start":102,"line_end":102,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151678,"byte_end":151684,"line_start":103,"line_end":103,"column_start":1,"column_end":7}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151685,"byte_end":151738,"line_start":104,"line_end":104,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":230},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152636,"byte_end":152653,"line_start":133,"line_end":133,"column_start":8,"column_end":25},"name":"decode_config_buf","qualname":"::decode::decode_config_buf","value":"fn <T> (input: T, config: Config, buffer: &mut Vec<u8>) -> Result<(), DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"Decode from string reference as octets.\nWrites into the supplied buffer to avoid allocation.\nReturns a Result containing an empty tuple, aka ().","sig":null,"attributes":[{"value":"/Decode from string reference as octets.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":151983,"byte_end":152025,"line_start":111,"line_end":111,"column_start":1,"column_end":43}},{"value":"/Writes into the supplied buffer to avoid allocation.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152026,"byte_end":152081,"line_start":112,"line_end":112,"column_start":1,"column_end":56}},{"value":"/Returns a Result containing an empty tuple, aka ().","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152082,"byte_end":152136,"line_start":113,"line_end":113,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152137,"byte_end":152140,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152141,"byte_end":152153,"line_start":115,"line_end":115,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152154,"byte_end":152157,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152158,"byte_end":152168,"line_start":117,"line_end":117,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152169,"byte_end":152192,"line_start":118,"line_end":118,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152193,"byte_end":152196,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152197,"byte_end":152211,"line_start":120,"line_end":120,"column_start":1,"column_end":15}},{"value":"/    let mut buffer = Vec::<u8>::new();","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152212,"byte_end":152253,"line_start":121,"line_end":121,"column_start":1,"column_end":42}},{"value":"/    base64::decode_config_buf(\"aGVsbG8gd29ybGR+Cg==\", base64::STANDARD, &mut buffer).unwrap();","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152254,"byte_end":152351,"line_start":122,"line_end":122,"column_start":1,"column_end":98}},{"value":"/    println!(\"{:?}\", buffer);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152352,"byte_end":152384,"line_start":123,"line_end":123,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152385,"byte_end":152388,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/    buffer.clear();","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152389,"byte_end":152411,"line_start":125,"line_end":125,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152412,"byte_end":152415,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/    base64::decode_config_buf(\"aGVsbG8gaW50ZXJuZXR-Cg==\", base64::URL_SAFE, &mut buffer)","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152416,"byte_end":152507,"line_start":127,"line_end":127,"column_start":1,"column_end":92}},{"value":"/        .unwrap();","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152508,"byte_end":152529,"line_start":128,"line_end":128,"column_start":1,"column_end":22}},{"value":"/    println!(\"{:?}\", buffer);","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152530,"byte_end":152562,"line_start":129,"line_end":129,"column_start":1,"column_end":33}},{"value":"/}","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152563,"byte_end":152567,"line_start":130,"line_end":130,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152568,"byte_end":152574,"line_start":131,"line_end":131,"column_start":1,"column_end":7}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":152575,"byte_end":152628,"line_start":132,"line_end":132,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":233},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":153909,"byte_end":153928,"line_start":169,"line_end":169,"column_start":8,"column_end":27},"name":"decode_config_slice","qualname":"::decode::decode_config_slice","value":"fn <T> (input: T, config: Config, output: &mut [u8]) -> Result<usize, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":" Decode the input into the provided output slice.","sig":null,"attributes":[{"value":"/ Decode the input into the provided output slice.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":153418,"byte_end":153470,"line_start":160,"line_end":160,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":153471,"byte_end":153474,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ This will not write any bytes past exactly what is decoded (no stray garbage bytes at the end).","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":153475,"byte_end":153574,"line_start":162,"line_end":162,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":153575,"byte_end":153578,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ If you don't know ahead of time what the decoded length should be, size your buffer with a","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":153579,"byte_end":153673,"line_start":164,"line_end":164,"column_start":1,"column_end":95}},{"value":"/ conservative estimate for the decoded length of an input: 3 bytes of output for every 4 bytes of","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":153674,"byte_end":153774,"line_start":165,"line_end":165,"column_start":1,"column_end":101}},{"value":"/ input, rounded up, or in other words `(input_len + 3) / 4 * 3`.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":153775,"byte_end":153842,"line_start":166,"line_end":166,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":153843,"byte_end":153846,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ If the slice is not large enough, this will panic.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":153847,"byte_end":153901,"line_start":168,"line_end":168,"column_start":1,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":314},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4610,"byte_end":4618,"line_start":113,"line_end":113,"column_start":5,"column_end":13},"name":"Standard","qualname":"::CharacterSet::Standard","value":"CharacterSet::Standard","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" The standard character set (uses `+` and `/`).","sig":null,"attributes":[{"value":"/ The standard character set (uses `+` and `/`).","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4476,"byte_end":4526,"line_start":110,"line_end":110,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4531,"byte_end":4534,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ See [RFC 3548](https://tools.ietf.org/html/rfc3548#section-3).","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4539,"byte_end":4605,"line_start":112,"line_end":112,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":316},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4758,"byte_end":4765,"line_start":117,"line_end":117,"column_start":5,"column_end":12},"name":"UrlSafe","qualname":"::CharacterSet::UrlSafe","value":"CharacterSet::UrlSafe","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" The URL safe character set (uses `-` and `_`).","sig":null,"attributes":[{"value":"/ The URL safe character set (uses `-` and `_`).","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4624,"byte_end":4674,"line_start":114,"line_end":114,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4679,"byte_end":4682,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ See [RFC 3548](https://tools.ietf.org/html/rfc3548#section-4).","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4687,"byte_end":4753,"line_start":116,"line_end":116,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":318},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4991,"byte_end":4996,"line_start":121,"line_end":121,"column_start":5,"column_end":10},"name":"Crypt","qualname":"::CharacterSet::Crypt","value":"CharacterSet::Crypt","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`).","sig":null,"attributes":[{"value":"/ The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`).","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4771,"byte_end":4878,"line_start":118,"line_end":118,"column_start":5,"column_end":112}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4883,"byte_end":4886,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ Not standardized, but folk wisdom on the net asserts that this alphabet is what crypt uses.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4891,"byte_end":4986,"line_start":120,"line_end":120,"column_start":5,"column_end":100}}]},{"kind":"TupleVariant","id":{"krate":0,"index":320},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":5110,"byte_end":5116,"line_start":123,"line_end":123,"column_start":5,"column_end":11},"name":"Bcrypt","qualname":"::CharacterSet::Bcrypt","value":"CharacterSet::Bcrypt","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" The bcrypt character set (uses `./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`).\n","sig":null,"attributes":[{"value":"/ The bcrypt character set (uses `./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`).","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":5002,"byte_end":5105,"line_start":122,"line_end":122,"column_start":5,"column_end":108}}]},{"kind":"TupleVariant","id":{"krate":0,"index":322},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":5278,"byte_end":5287,"line_start":127,"line_end":127,"column_start":5,"column_end":14},"name":"ImapMutf7","qualname":"::CharacterSet::ImapMutf7","value":"CharacterSet::ImapMutf7","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" The character set used in IMAP-modified UTF-7 (uses `+` and `,`).","sig":null,"attributes":[{"value":"/ The character set used in IMAP-modified UTF-7 (uses `+` and `,`).","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":5122,"byte_end":5191,"line_start":124,"line_end":124,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":5196,"byte_end":5199,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ See [RFC 3501](https://tools.ietf.org/html/rfc3501#section-5.1.3)","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":5204,"byte_end":5273,"line_start":126,"line_end":126,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":324},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":5448,"byte_end":5454,"line_start":131,"line_end":131,"column_start":5,"column_end":11},"name":"BinHex","qualname":"::CharacterSet::BinHex","value":"CharacterSet::BinHex","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" The character set used in BinHex 4.0 files.","sig":null,"attributes":[{"value":"/ The character set used in BinHex 4.0 files.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":5293,"byte_end":5340,"line_start":128,"line_end":128,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":5345,"byte_end":5348,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ See [BinHex 4.0 Definition](http://files.stairways.com/other/binhex-40-specs-info.txt)","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":5353,"byte_end":5443,"line_start":130,"line_end":130,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":313},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4457,"byte_end":4469,"line_start":109,"line_end":109,"column_start":10,"column_end":22},"name":"CharacterSet","qualname":"::CharacterSet","value":"CharacterSet::{Standard, UrlSafe, Crypt, Bcrypt, ImapMutf7, BinHex}","parent":null,"children":[{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":324}],"decl_id":null,"docs":" Available encoding character sets\n","sig":null,"attributes":[{"value":"/ Available encoding character sets","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":4380,"byte_end":4417,"line_start":107,"line_end":107,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":331},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":6487,"byte_end":6493,"line_start":160,"line_end":160,"column_start":12,"column_end":18},"name":"Config","qualname":"::Config","value":"Config {  }","parent":null,"children":[{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334}],"decl_id":null,"docs":" Contains configuration parameters for base64 encoding\n","sig":null,"attributes":[{"value":"/ Contains configuration parameters for base64 encoding","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":6388,"byte_end":6445,"line_start":158,"line_end":158,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":6812,"byte_end":6815,"line_start":171,"line_end":171,"column_start":12,"column_end":15},"name":"new","qualname":"<Config>::new","value":"fn (char_set: CharacterSet, pad: bool) -> Config","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Config`.\n","sig":null,"attributes":[{"value":"/ Create a new `Config`.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":6774,"byte_end":6800,"line_start":170,"line_end":170,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":7050,"byte_end":7053,"line_start":180,"line_end":180,"column_start":12,"column_end":15},"name":"pad","qualname":"<Config>::pad","value":"fn (self, pad: bool) -> Config","parent":null,"children":[],"decl_id":null,"docs":" Sets whether to pad output with `=` characters.\n","sig":null,"attributes":[{"value":"/ Sets whether to pad output with `=` characters.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":6987,"byte_end":7038,"line_start":179,"line_end":179,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":7335,"byte_end":7361,"line_start":188,"line_end":188,"column_start":12,"column_end":38},"name":"decode_allow_trailing_bits","qualname":"<Config>::decode_allow_trailing_bits","value":"fn (self, allow: bool) -> Config","parent":null,"children":[],"decl_id":null,"docs":" Sets whether to emit errors for nonzero trailing bits.","sig":null,"attributes":[{"value":"/ Sets whether to emit errors for nonzero trailing bits.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":7125,"byte_end":7183,"line_start":184,"line_end":184,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":7188,"byte_end":7191,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ This is useful when implementing","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":7196,"byte_end":7232,"line_start":186,"line_end":186,"column_start":5,"column_end":41}},{"value":"/ [forgiving-base64 decode](https://infra.spec.whatwg.org/#forgiving-base64-decode).","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":7237,"byte_end":7323,"line_start":187,"line_end":187,"column_start":5,"column_end":91}}]},{"kind":"Const","id":{"krate":0,"index":259},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":7546,"byte_end":7554,"line_start":197,"line_end":197,"column_start":11,"column_end":19},"name":"STANDARD","qualname":"::STANDARD","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" Standard character set with padding.\n","sig":null,"attributes":[{"value":"/ Standard character set with padding.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":7495,"byte_end":7535,"line_start":196,"line_end":196,"column_start":1,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":260},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":7724,"byte_end":7739,"line_start":204,"line_end":204,"column_start":11,"column_end":26},"name":"STANDARD_NO_PAD","qualname":"::STANDARD_NO_PAD","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" Standard character set without padding.\n","sig":null,"attributes":[{"value":"/ Standard character set without padding.","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":7670,"byte_end":7713,"line_start":203,"line_end":203,"column_start":1,"column_end":44}}]},{"kind":"Const","id":{"krate":0,"index":261},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":7906,"byte_end":7914,"line_start":211,"line_end":211,"column_start":11,"column_end":19},"name":"URL_SAFE","qualname":"::URL_SAFE","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" URL-safe character set with padding\n","sig":null,"attributes":[{"value":"/ URL-safe character set with padding","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":7856,"byte_end":7895,"line_start":210,"line_end":210,"column_start":1,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":262},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":8082,"byte_end":8097,"line_start":218,"line_end":218,"column_start":11,"column_end":26},"name":"URL_SAFE_NO_PAD","qualname":"::URL_SAFE_NO_PAD","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" URL-safe character set without padding\n","sig":null,"attributes":[{"value":"/ URL-safe character set without padding","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":8029,"byte_end":8071,"line_start":217,"line_end":217,"column_start":1,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":263},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":8258,"byte_end":8263,"line_start":225,"line_end":225,"column_start":11,"column_end":16},"name":"CRYPT","qualname":"::CRYPT","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" As per `crypt(3)` requirements\n","sig":null,"attributes":[{"value":"/ As per `crypt(3)` requirements","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":8213,"byte_end":8247,"line_start":224,"line_end":224,"column_start":1,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":264},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":8412,"byte_end":8418,"line_start":232,"line_end":232,"column_start":11,"column_end":17},"name":"BCRYPT","qualname":"::BCRYPT","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" Bcrypt character set\n","sig":null,"attributes":[{"value":"/ Bcrypt character set","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":8377,"byte_end":8401,"line_start":231,"line_end":231,"column_start":1,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":265},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":8580,"byte_end":8590,"line_start":239,"line_end":239,"column_start":11,"column_end":21},"name":"IMAP_MUTF7","qualname":"::IMAP_MUTF7","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" IMAP modified UTF-7 requirements\n","sig":null,"attributes":[{"value":"/ IMAP modified UTF-7 requirements","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":8533,"byte_end":8569,"line_start":238,"line_end":238,"column_start":1,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":266},"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":8743,"byte_end":8749,"line_start":246,"line_end":246,"column_start":11,"column_end":17},"name":"BINHEX","qualname":"::BINHEX","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" BinHex character set\n","sig":null,"attributes":[{"value":"/ BinHex character set","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":8708,"byte_end":8732,"line_start":245,"line_end":245,"column_start":1,"column_end":25}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/chunked_encoder.rs","byte_start":9546,"byte_end":9560,"line_start":27,"line_end":27,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/chunked_encoder.rs","byte_start":11880,"byte_end":11890,"line_start":93,"line_end":93,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/chunked_encoder.rs","byte_start":12065,"byte_end":12075,"line_start":100,"line_end":100,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":17076,"byte_end":17089,"line_start":23,"line_end":23,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":17368,"byte_end":17381,"line_start":33,"line_end":33,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":17702,"byte_end":17715,"line_start":44,"line_end":44,"column_start":51,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":21211,"byte_end":21224,"line_start":57,"line_end":57,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":21761,"byte_end":21774,"line_start":71,"line_end":71,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":25087,"byte_end":25100,"line_start":161,"line_end":161,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":113114,"byte_end":113127,"line_start":79,"line_end":79,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":113514,"byte_end":113527,"line_start":92,"line_end":92,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":117651,"byte_end":117664,"line_start":200,"line_end":200,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":124507,"byte_end":124520,"line_start":348,"line_end":348,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":149834,"byte_end":149845,"line_start":40,"line_end":40,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":150396,"byte_end":150407,"line_start":55,"line_end":55,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":5464,"byte_end":5476,"line_start":134,"line_end":134,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":6761,"byte_end":6767,"line_start":169,"line_end":169,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":3863,"byte_end":3870,"line_start":87,"line_end":87,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":37}},{"kind":"Mod","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":3915,"byte_end":3919,"line_start":89,"line_end":89,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":65}},{"kind":"Mod","span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":3976,"byte_end":3981,"line_start":92,"line_end":92,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":117}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/chunked_encoder.rs","byte_start":9546,"byte_end":9560,"line_start":27,"line_end":27,"column_start":6,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":17},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/chunked_encoder.rs","byte_start":11880,"byte_end":11890,"line_start":93,"line_end":93,"column_start":10,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":27},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/chunked_encoder.rs","byte_start":12065,"byte_end":12075,"line_start":100,"line_end":100,"column_start":19,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":27},"to":{"krate":0,"index":13}},{"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":17076,"byte_end":17089,"line_start":23,"line_end":23,"column_start":10,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":46},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":17368,"byte_end":17381,"line_start":33,"line_end":33,"column_start":22,"column_end":35},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":46},"to":{"krate":2,"index":5982}},{"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/display.rs","byte_start":17702,"byte_end":17715,"line_start":44,"line_end":44,"column_start":51,"column_end":64},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":56},"to":{"krate":0,"index":13}},{"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":21211,"byte_end":21224,"line_start":57,"line_end":57,"column_start":38,"column_end":51},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":79},"to":{"krate":2,"index":5977}},{"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":21761,"byte_end":21774,"line_start":71,"line_end":71,"column_start":23,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":79},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/read/decoder.rs","byte_start":25087,"byte_end":25100,"line_start":161,"line_end":161,"column_start":28,"column_end":41},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":79},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":113114,"byte_end":113127,"line_start":79,"line_end":79,"column_start":35,"column_end":48},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":133},"to":{"krate":2,"index":5977}},{"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":113514,"byte_end":113527,"line_start":92,"line_end":92,"column_start":20,"column_end":33},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":117651,"byte_end":117664,"line_start":200,"line_end":200,"column_start":30,"column_end":43},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":133},"to":{"krate":1,"index":2915}},{"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/write/encoder.rs","byte_start":124507,"byte_end":124520,"line_start":348,"line_end":348,"column_start":29,"column_end":42},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":133},"to":{"krate":2,"index":2075}},{"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":149834,"byte_end":149845,"line_start":40,"line_end":40,"column_start":23,"column_end":34},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":291},"to":{"krate":2,"index":5982}},{"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/decode.rs","byte_start":150396,"byte_end":150407,"line_start":55,"line_end":55,"column_start":23,"column_end":34},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":291},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":5464,"byte_end":5476,"line_start":134,"line_end":134,"column_start":6,"column_end":18},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":313},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jimmykang/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.2/src/lib.rs","byte_start":6761,"byte_end":6767,"line_start":169,"line_end":169,"column_start":6,"column_end":12},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":331},"to":{"krate":4294967295,"index":4294967295}}]}